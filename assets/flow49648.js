import{C as F,D as C,E as R,G as S,L as U,H as k,r as w,p as v,I as y,y as G,M as P}from"../index49648.js";class r{static async fetchFlows(e){return await F("/flows",e)}static async fetchFlowDetail(e,s){return await F(`/flows/${e}`,s)}static async updateFlow(e,s,c){return await C(`/flows/${e}`,s,c)}static async createFlow(e,s){return await R("/flows/",e,s)}static async deleteFlow(e){await S(`/flows/${e}`)}static async exportFlow(e){return await U(`/flows/${e}/export`)}}const j=k("flow-store",()=>{const l=w(null),e=w([]),s=w(0),c=w([]),h=v(()=>s.value),m=v(()=>l.value);async function x(t){const o=await r.fetchFlows(t);e.value=o.flows,s.value=o.total_records}async function b(t,o){l.value=null,c.value=[];const a=await r.fetchFlowDetail(t,o);l.value=a.flow,c.value=a.flow.practices,c.value.forEach(n=>{n.policy_premium=n.policy_premium/100})}async function D(t,o,a){const n=await r.updateFlow(t,o,a);l.value=n.flow}async function E(t,o){const a=await r.createFlow(t,o);l.value=a.flow}async function $(t){await r.deleteFlow(t)}async function L(t){var o;try{const{blob:a,headers:n}=await r.exportFlow(t);let f=`CQP_${(o=l.value)==null?void 0:o.code}.txt`;const p=n["content-disposition"];if(console.log(n),p){const u=p.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);u&&u[1]&&(f=u[1].replace(/['"]/g,""))}const d=window.URL.createObjectURL(a),i=document.createElement("a");i.href=d,i.download=f,document.body.appendChild(i),i.click(),document.body.removeChild(i),window.URL.revokeObjectURL(d),G("File esportato con successo")}catch(a){console.error("Export failed:",a),P("Errore durante l'esportazione del file")}}function _(){l.value=null,e.value=[],s.value=0,c.value=[]}return{flows:y(e),practices:y(c),currentFlow:m,totalFlows:h,fetchFlows:x,fetchFlowDetail:b,updateFlow:D,createFlow:E,deleteFlow:$,exportFlow:L,$reset:_}});export{j as u};
